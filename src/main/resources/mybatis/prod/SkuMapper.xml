<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.damei.scm.repository.prod.SkuDao">
    <resultMap id="BaseResultMap" type="Sku">
        <id column="id" property="id"/>
        <result column="code" property="code"/>
        <result column="name" property="name"/>
        <result column="product_id" property="product.id"/>
        <result column="supplier_id" property="supplierId"/>
        <result column="attribute1" property="attribute1"/>
        <result column="attribute2" property="attribute2"/>
        <result column="attribute3" property="attribute3"/>
        <result column="stock" property="stock"/>
        <result column="process_status" property="processStatus"/>
        <result column="priceFlag" property="priceFlag"/>
    </resultMap>

    <resultMap  id="BaseWithProductResultMap" type="Sku" extends="BaseResultMap">
        <result column="model" property="product.model"/>
        <result column="spec" property="product.spec"/>
        <result column="brand_id" property="product.brand.id"/>
        <result column="brand_name" property="product.brand.brandName"/>
        <result column="category_url" property="product.catalog.url"/>
        <result column="convert_unit" property="product.catalog.convertUnit"/>
        <result column="is_check_scale" property="product.catalog.checkScale"/>
        <result column="process_status" property="processStatus"/>
        <result column="dictName" property="product.measureUnitName"/>
        <result column="attribute1_name" property="skuMeta.attribute1Name"/>
        <result column="attribute2_name" property="skuMeta.attribute2Name"/>
        <result column="attribute3_name" property="skuMeta.attribute3Name"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,code, name,product_id,supplier_id,attribute1,attribute2,attribute3,stock,process_status
    </sql>

    <select id="findAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from prod_sku
        order by id
    </select>

    <select id="getById" resultMap="BaseResultMap" parameterType="long">
        select
        <include refid="Base_Column_List"/>
        from prod_sku
        where id = #{id}
    </select>

    <select id="findByIdIn" resultMap="BaseResultMap" parameterType="list">
        select
        <include refid="Base_Column_List"/>
        from prod_sku
        <foreach collection="list" item="skuId" open="where id in (" close=")" index="idx" separator=",">
            ${skuId}
        </foreach>
    </select>

    <select id="findByProductId" resultMap="BaseResultMap" parameterType="long">
        select
        <include refid="Base_Column_List"/>
        from prod_sku
        where product_id = #{productId} order by id
    </select>

    <delete id="deleteById" parameterType="long">
        delete from prod_sku
        where id = #{id}
    </delete>

    <insert id="insert" parameterType="Sku" useGeneratedKeys="true" keyProperty="id">
        insert into prod_sku
        <trim prefix="(" suffix=")" suffixOverrides=",">
            code, name,product_id, supplier_id,attribute1,attribute2,attribute3,stock
            <if test="processStatus != null">
                ,process_status
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{code},#{name},#{product.id},#{supplierId},
            #{attribute1}, #{attribute2}, #{attribute3},#{stock}
            <if test="processStatus != null">
                ,#{processStatus}
            </if>
        </trim>
    </insert>

    <update id="update" parameterType="Sku">
        update prod_sku
        <set>
            <if test="code!=null">
                code = #{code},
            </if>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="supplierId!=null">
                supplier_id = #{supplierId},
            </if>
            <if test="attribute1!=null">
                attribute1 = #{attribute1},
            </if>
            <if test="attribute2!=null">
                attribute2 = #{attribute2},
            </if>

            <if test="attribute3!=null">
                attribute3 = #{attribute3},
            </if>

            <if test="stock != null">
                stock = #{stock},
            </if>
            <if test="processStatus != null">
                process_status = #{processStatus},
            </if>
        </set>
        where id = #{id}
    </update>

    <update id="incrDecrStock">
        update prod_sku set stock = stock + #{incrDecrement} where id = #{skuId}
    </update>

    <select id="getSkuIdByAttributes" resultType="long">
        select id from prod_sku
        <where>
            <if test="attribute1!=null">
                and attribute1=#{attribute1}
            </if>
            <if test="attribute2!=null">
                and attribute2=#{attribute2}
            </if>
            <if test="attribute3!=null">
                and attribute3=#{attribute3}
            </if>
            <if test="productId!=null">
                and product_id=#{productId}
            </if>
        </where>
        limit 1
    </select>

    <select id="getByCode" resultMap="BaseResultMap" parameterType="Sku">
        select * from prod_sku
        where code = #{code} and supplier_id = #{supplierId}
        <if test="id!=null">
            and id!=#{id}
        </if>
    </select>

    <select id="searchTotal" parameterType="map" resultType="long">
        SELECT COUNT(*)
        <include refid="searchFromWhere"/>
    </select>

    <select id="search" parameterType="map" resultMap="BaseWithProductResultMap">
        SELECT sku.*,prod.model,prod.spec,prod.brand_id,prod.category_url,proc.convert_unit,proc.is_check_scale
        ,pp.priceFlag,dm.name AS dictName,psm.*
        <include refid="searchFromWhere"/>
        <if test="sort != null">
            ORDER BY
            <foreach collection="sort" item="order" separator=",">
                ${order.property} ${order.direction}
            </foreach>
        </if>
        limit #{offset},#{pageSize}
    </select>

    <sql id="searchFromWhere">
        from prod_sku sku JOIN prod_product prod ON (sku.product_id  = prod.id)
        LEFT JOIN prod_sku_meta psm ON (prod.id = psm.product_id)
        LEFT JOIN dict_measure_unit dm ON (prod.measure_unit_id = dm.id)
        LEFT JOIN prod_brand pbr ON (prod.brand_id = pbr.id)
        JOIN prod_catalog proc ON (prod.category_url = proc.url)
        LEFT JOIN (
        SELECT
        sku_id,
        GROUP_CONCAT(price_type) priceFlag
        FROM
        prod_sku_price
        GROUP BY
        sku_id
        ) pp ON sku.id = pp.sku_id
        <where>
            prod.supplier_id IN (
                SELECT
                ps.id
                FROM
                prod_supplier ps
                LEFT JOIN region_supplier rs ON rs.id = ps.region_supplier_id
                LEFT JOIN store s ON s.code = rs.store_code
                <where>
                    <if test="allStoreCode != null">
                        AND s.code = #{allStoreCode}
                    </if>
                    <if test="allSupplierId != null">
                        AND rs.id = #{allSupplierId}
                    </if>
                    <if test="supplierId!= null">
                        AND ps.id = #{supplierId}
                    </if>
                </where>
            )
            <if test="keyword != null">
               AND (sku.name LIKE concat('%',#{keyword},'%') OR sku.code LIKE concat('%',#{keyword},'%') OR prod.model LIKE concat('%',#{keyword},'%')
                OR pbr.brand_name LIKE concat('%',#{keyword},'%'))
            </if>
            <if test="productId != null">
                AND sku.product_id = #{productId}
            </if>
            <if test="processStatus != null">
                AND sku.process_status = #{processStatus}
            </if>
            <if test="catalogUrl != null">
                AND prod.category_url  LIKE concat('%',#{catalogUrl},'%')
            </if>
            <if test="managedSupplierIdList!=null">
                AND prod.supplier_id in
                <foreach collection="managedSupplierIdList" index="idx" item="supplierIdr" open="(" close=")" separator=",">
                    ${supplierIdr}
                </foreach>
            </if>
            <if test="brandId != null">
                AND brand_id = #{brandId}
            </if>

            <if test="excludeSkuIdList != null">
                AND sku.id not in
                <foreach collection="excludeSkuIdList" index="idx" item="skuId" open="(" close=")" separator=",">
                    ${skuId}
                </foreach>
            </if>

        </where>
    </sql>


    <select id="countTotal"   parameterType="map" resultType="java.lang.Long">
        SELECT COUNT(*)
        <include refid="approveWhere"/>
    </select>

    <select id="findApproveList"  parameterType="map" resultMap="BaseWithProductResultMap">
        SELECT sku.*,prod.model,prod.spec,prod.brand_id,pb.brand_name,prod.category_url,proc.is_check_scale,pp.priceFlag
        <include refid="approveWhere"/>
        <if test="sort != null">
            ORDER BY
            <foreach collection="sort" item="order" separator=",">
                ${order.property} ${order.direction}
            </foreach>
        </if>
        limit #{offset},#{pageSize}
    </select>

    <sql id="approveWhere">
        from prod_sku sku JOIN prod_product prod ON (sku.product_id  = prod.id)
        JOIN prod_catalog proc ON (prod.category_url = proc.url)
        LEFT JOIN (
        SELECT
        sku_id,
        GROUP_CONCAT(price_type) priceFlag
        FROM
        prod_sku_price
        GROUP BY
        sku_id
        ) pp ON sku.id = pp.sku_id
        LEFT JOIN prod_brand pb ON prod.brand_id = pb.id
        <where>
            prod.supplier_id IN (
            SELECT
            ps.id
            FROM
            prod_supplier ps
            LEFT JOIN region_supplier rs ON rs.id = ps.region_supplier_id
            LEFT JOIN store s ON s.code = rs.store_code
            <where>
                <if test="allStoreCode != null">
                    AND s.code = #{allStoreCode}
                </if>
                <if test="allSupplierId != null">
                    AND rs.id = #{allSupplierId}
                </if>
                <if test="supplierId!= null">
                    AND ps.id = #{supplierId}
                </if>
            </where>
            )
            <if test="keyword != null">
               AND   (sku.name LIKE concat('%',#{keyword},'%') OR sku.code LIKE concat('%',#{keyword},'%'))
            </if>
            <if test="productId != null">
                AND sku.product_id = #{productId}
            </if>
            <if test="catalogUrl != null">
                AND category_url  LIKE concat('%',#{catalogUrl},'%')
            </if>
            <if test="brandId != null">
                AND brand_id = #{brandId}
            </if>
            <if test="processStatus!=null">
                  AND sku.process_status in
                  <foreach collection="processStatus" index="idx" item="processStatu" open="(" close=")" separator=",">
                      #{processStatu}
                  </foreach>
            </if>
            <if test="managedSupplierIdList!=null">
                AND prod.supplier_id in
                <foreach collection="managedSupplierIdList" index="idx" item="supplierIdr" open="(" close=")" separator=",">
                    ${supplierIdr}
                </foreach>
            </if>
            <if test="processStatus==null">
                AND sku.process_status =''
            </if>
        </where>
    </sql>





    <select id="findCheckList"  parameterType="map" resultMap="BaseWithProductResultMap">
        SELECT DISTINCT sku.*,prod.model,prod.spec,prod.brand_id,prod.category_url,proc.is_check_scale,pp.priceFlag
        <include refid="checkWhere"/>
        <if test="sort != null">
            ORDER BY
            <foreach collection="sort" item="order" separator=",">
                ${order.property} ${order.direction}
            </foreach>
        </if>
        limit #{offset},#{pageSize}
    </select>
    <select id="checkTotal"   parameterType="map" resultType="java.lang.Long">
        SELECT COUNT(*)
        <include refid="checkWhere"/>
    </select>
    <sql id="checkWhere">
        FROM prod_sku sku
        JOIN prod_sku_approval_record psar ON sku.id=psar.sku_id
        JOIN prod_product prod ON (sku.product_id  = prod.id)
        JOIN prod_catalog proc ON (prod.category_url = proc.url)
        LEFT JOIN (
        SELECT
        sku_id,
        GROUP_CONCAT(price_type) priceFlag
        FROM
        prod_sku_price
        GROUP BY
        sku_id
        ) pp ON sku.id = pp.sku_id
        <where>
            psar.approval_account= #{userId}
            AND prod.supplier_id IN (
            SELECT
            ps.id
            FROM
            prod_supplier ps
            LEFT JOIN region_supplier rs ON rs.id = ps.region_supplier_id
            LEFT JOIN store s ON s.code = rs.store_code
            <where>
                <if test="allStoreCode != null">
                    AND s.code = #{allStoreCode}
                </if>
                <if test="allSupplierId != null">
                    AND rs.id = #{allSupplierId}
                </if>
                <if test="supplierId!= null">
                    AND ps.id = #{supplierId}
                </if>
            </where>
            )
            <if test="keyword != null">
                AND   (sku.name LIKE concat('%',#{keyword},'%') OR sku.code LIKE concat('%',#{keyword},'%'))
            </if>
            <if test="productId != null">
                AND sku.product_id = #{productId}
            </if>
            <if test="catalogUrl != null">
                AND category_url  LIKE concat('%',#{catalogUrl},'%')
            </if>
            <if test="brandId != null">
                AND brand_id = #{brandId}
            </if>
            <if test="managedSupplierIdList!=null">
                AND prod.supplier_id in
                <foreach collection="managedSupplierIdList" index="idx" item="supplierIdr" open="(" close=")" separator=",">
                    ${supplierIdr}
                </foreach>
            </if>
        </where>
    </sql>

    <update id="batchSku">
        UPDATE prod_sku SET
        process_status=#{processStatus}
        WHERE product_id=#{product.id}
        <if test="processStatus==&quot;sku_shelf_failure&quot;">
            AND process_status="sku_shelf_shelves"
        </if>
    </update>

    <insert id="insertBatchReturnProperty" parameterType="list" useGeneratedKeys="true" keyProperty="id">
        insert into prod_sku (
            code, name,product_id, supplier_id,attribute1,attribute2,attribute3,stock,process_status
        ) VALUES
        <foreach item="item" collection="list"  index="index" separator="," >
        (
            #{item.code},#{item.name},#{item.product.id},#{item.supplierId},#{item.attribute1}, #{item.attribute2}, #{item.attribute3},#{item.stock},#{item.processStatus}
        )
        </foreach>
    </insert>

</mapper>