<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.damei.scm.repository.prod.BrandDao">
    <resultMap id="BaseResultMap" type="Brand">
        <id column="id" property="id"/>
        <result column="code" property="code"/>
        <result column="brand_name" property="brandName"/>
        <result column="logo" property="logo"/>
        <result column="description" property="description"/>
        <result column="pinyin_initial" property="pinyinInitial"/>
        <result column="status" property="status"/>
        <result column="editor" property="editor.id"/>
        <result column="edit_time" property="editTime"/>
    </resultMap>
    
    <sql id="Base_Column_List">
        id, code, brand_name,logo,pinyin_initial,description,status,editor,edit_time
    </sql>

    <select id="getByBrandName" resultType="integer" parameterType="string">
        select pd.id from prod_brand pd
        <where>
            <if test="_parameter != null">
                brand_name=#{_parameter}
            </if>
        </where>
    </select>

    <select id="getById" resultMap="BaseResultMap" parameterType="long">
        select
        <include refid="Base_Column_List"/>
        from prod_brand
        where id = #{id}
    </select>
    
    <select id="getByCode" resultMap="BaseResultMap" parameterType="Brand">
        select
        <include refid="Base_Column_List"/>
        from prod_brand
        where code = #{code}
        <if test="id!=null">
        	AND id!=#{id}
        </if>
    </select>
    
    <select id="getByName" resultMap="BaseResultMap" parameterType="Brand">
        select
        <include refid="Base_Column_List"/>
        from prod_brand
        where brand_name = #{brandName}
        <if test="id!=null">
        	AND id!=#{id}
        </if>
    </select>
	
    <select id="findAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM prod_brand 
        WHERE status= 'OPEN' ORDER BY  id
    </select>

    <select id="findAllForMap" resultType="map">
        SELECT
          id, brand_name as name
          FROM prod_brand
         WHERE status= 'OPEN' ORDER BY  id
    </select>

    <select id="findByName" resultType="map">
        SELECT
        id, brand_name as name
        FROM prod_brand
        WHERE status= 'OPEN'
        <if test="name != null and name !='' ">
            AND brand_name LIKE concat('%',#{name},'%')
        </if>
        ORDER BY id asc
    </select>

    <select id="findTopBrandByStatusOrderByIdAsc" resultMap="BaseResultMap">
    	SELECT <include refid="Base_Column_List"/> from prod_brand 
    	<where>
    		<if test="status!=null">
    			status = #{status}
    		</if>
    	</where>
    	ORDER BY id  
		<if test="topN!=null">
			limit ${topN}
   		</if>
    </select>

    <delete id="deleteById" parameterType="long">
        delete from prod_brand
        where id = #{id}
    </delete>
    
    <insert id="insert" parameterType="Brand" useGeneratedKeys="true" keyProperty="id">
        insert into prod_brand
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="code != null">
                code,
            </if>
            <if test="brandName != null">
                brand_name,
            </if>
            <if test="pinyinInitial != null">
                pinyin_initial,
            </if>
            <if test="logo != null">
                logo,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="editor != null">
                editor,
            </if>
            <if test="editTime != null">
                edit_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="code != null">
                #{code},
            </if>
            <if test="brandName != null">
                #{brandName},
            </if>
            <if test="pinyinInitial != null">
                #{pinyinInitial},
            </if>
           <if test="logo != null">
                #{logo},
            </if>
            <if test="status != null">
                #{status},
            </if>
            <if test="description != null">
                #{description},
            </if>
            <if test="editor != null">
                #{editor.id},
            </if>
            <if test="editTime != null">
                #{editTime},
            </if>
        </trim>
    </insert>
    
    
    <update id="update" parameterType="Brand">
        update prod_brand
        <set>
            <if test="code != null">
                code = #{code},
            </if>
            <if test="brandName != null">
                brand_name = #{brandName},
            </if>
            <if test="pinyinInitial != null">
                pinyin_initial = #{pinyinInitial},
            </if>
           <if test="logo != null">
                logo = #{logo},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="pinyinInitial != null">
                pinyin_initial=#{pinyinInitial},
            </if>
            <if test="description != null">
                description = #{description},
            </if>
            <if test="editor != null">
                editor = #{editor.id},
            </if>
            <if test="editTime != null">
                edit_time =  #{editTime},
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="searchTotal" parameterType="map" resultType="long">
        SELECT COUNT(*)
        <include refid="searchFromWhere"/>
    </select>

    <select id="getBrandNameById" resultType="string">
        SELECT pd.brand_name FROM prod_brand AS  pd where id=#{brandId}
    </select>

    <select id="search" parameterType="map" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        <include refid="searchFromWhere"/>
        <if test="sort != null">
            ORDER BY
            <foreach collection="sort" item="order" separator=",">
                ${order.property} ${order.direction}
            </foreach>
        </if>
        limit #{offset},#{pageSize}
    </select>

    <sql id="searchFromWhere">
        from prod_brand 
        <where>
        <if test="keyword != null">
            code LIKE concat('%',#{keyword},'%')
            or pinyin_initial like  concat('%',#{keyword},'%')
            or brand_name LIKE concat('%',#{keyword},'%')
        </if>
        <if test="status != null">
            and status = #{status}
        </if>
        </where>
    </sql>

</mapper>